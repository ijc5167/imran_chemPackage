from __future__ import print_function, division
from math import sqrt, atan2, sin, cos

# This module provides the function fix that will clean
# up the POV-Ray file generated by povexport.  VPython
# does not always put the lights behind the camera, so this
# function will move the lights behind the camera.  It can
# also update dome texture information

def fix(filename, texture=None):
    '''
    Function to move the lights behind the camera and
    add texture information, if requested.
    '''

    # Set up the constants used to positiion the new lights
    pos1 = [-0.5, 0.5, 5]
    pos2 = [-5, -15, -.5]
    rad = ( sqrt(pos1[0]**2 + pos1[1]**2 + pos1[2]**2),
            sqrt(pos1[0]**2 + pos1[1]**2 + pos2[2]**2 ) )
    th  = ( atan2(sqrt(pos1[0]**2 + pos1[1]**2), pos1[2]),
            atan2(sqrt(pos2[0]**2 + pos2[1]**2), pos2[2]) )
    phi = ( atan2(pos1[1], pos1[0]),
            atan2(pos2[1], pos2[0]) )

    # Read in the file
    with open(filename) as fl:
        f = [x.strip() for x in fl]

    # Edit ambient to 2.9
    indx = [i for i, x in enumerate(f) if 'global_settings' in x][0]
    #f[indx] = f[indx].replace('2.0', '2.9')
    del f[indx]

    # Find the camera. Look for the line with 'location', and keep only the #'s
    indx = [i for i, x in enumerate(f) if 'location' in x][0]
    vector = [x for x in f[indx].split()[1:]]
    # Remove extra crap from the numbers and convert to floats
    vector = [float(x.strip('<>,')) for x in vector]

    # Find where the two new lights will be
    light1 = [vector[0] - ( rad[0] * sin(th[0]) * cos(phi[0]) ),
              vector[1] - ( rad[0] * sin(th[0]) * cos(phi[0]) ),
              vector[2] - ( rad[0] * sin(th[0]) * cos(phi[0]) )]
    light2 = [vector[0] - ( rad[1] * sin(th[1]) * cos(phi[1]) ),
              vector[1] - ( rad[1] * sin(th[1]) * cos(phi[1]) ),
              vector[2] - ( rad[1] * sin(th[1]) * cos(phi[1]) )]

    # Make a list that contains the new light source
    fmt = '  <{0[0]:9.5f}, {0[1]:9.5f}, {0[2]:9.5f}>'
    light = ['light_source {']
    light.append(fmt.format(light1))
    light.extend(['  color rgb <0.9, 0.9, 0.9>', '  parallel',
                  '  point_at <0, 0, 0>', '}', '', 'light_source {'])
    light.append(fmt.format(light2))
    light.extend(['  color rgb <0.9, 0.9, 0.9>', '}'])#, '  parallel', 
                  #'  point_at <0, 0, 0>', '}'])

    # Look for the old light source
    indx = [i for i, x in enumerate(f) if 'light_source' in x][0]
    # Replace old light source with the new one
    f = f[0:indx] + light + f[indx+7:]

    # Add a texture if requested
    if texture is not None:
        indx = [i for i, x in enumerate(f) if 'pigment' in x][0]
        line = f[indx]
        line = 'texture {{ {0} {1} }}'.format(texture, line)
        f[indx] = line

    # Now right the changes to file
    with open(filename, 'w') as fl:
        for line in f: print(line, file=fl)
